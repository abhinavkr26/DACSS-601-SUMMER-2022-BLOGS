[
  {
    "path": "posts/More Data Import DPLYR/",
    "title": "More data import from Github using `rio` package",
    "description": "More data import and an introduction to the dplyr package.",
    "author": [
      {
        "name": "DACSS Tutor",
        "url": {}
      }
    ],
    "date": "2022-07-13",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nReading\r\nin the data\r\nA little bit about dplyr\r\nselect()\r\nfilter()\r\n\r\nWrapping up\r\n\r\nIntroduction\r\nToday, we’ll be working on how to import a slightly more difficult\r\ndataset. Specifically, we’ll be looking at a dataset on the cost of food\r\nborne illnesses in the US. These data were obtained from data.gov.\r\nThis data is in Excel file format and are not optimized to easily\r\nread into R. Luckily, we can use the rio\r\npackage to get them into R using import\r\nfunction.\r\nYou will also notice that in this case you are unable to get a\r\nraw content url for the file OR if the file size is too big\r\nfor github then it will force you to download the data\r\nrather than giving the raw content details. rio package\r\nwill solve this problem.\r\n\r\n\r\nShow code\r\n\r\nlibrary(rio)\r\n\r\n\r\n\r\nReading in the data\r\nThe first thing we’ll notice is that we need to skip a few rows.\r\nSpecifically, we need to skip the first 5 rows, as they aren’t needed.\r\nWe can specify skip=5 when we read in the data.\r\n\r\n\r\nShow code\r\n\r\nd <- rio::import(\"http://raw.githubusercontent.com/abhinavkr26/DACSS-601-SUMMER-2022-BLOGS/main/datasets/basic%20datasets/Total_cost_for_top_15_pathogens_2018.xlsx\",\r\n                skip=5)\r\n\r\nd\r\n\r\n\r\n                                                                                                                                                                                                                                                                                                                                                                       Campylobacter spp. (all species)\r\n1                                                                                                                                                                                                                                                                                                                                                                               Clostridium perfringens\r\n2                                                                                                                                                                                                                                                                                                                                                                    Cryptosporidium spp. (all species)\r\n3                                                                                                                                                                                                                                                                                                                                                                               Cyclospora cayetanensis\r\n4                                                                                                                                                                                                                                                                                                                                                                                Listeria monocytogenes\r\n5                                                                                                                                                                                                                                                                                                                                                                                             Norovirus\r\n6                                                                                                                                                                                                                                                                                                                                                                    Salmonella (non-typhoidal species)\r\n7                                                                                                                                                                                                                                                                                                                                                                                Shigella (all species)\r\n8                                                                                                                                                                                                                                                                                                                                               Shiga toxin-producing Escherichia coli O157 (STEC O157)\r\n9                                                                                                                                                                                                                                                                                                                                       non-O157 Shiga toxin-producing Escherichia coli (STEC non-O157)\r\n10                                                                                                                                                                                                                                                                                                                                                                                    Toxoplasma gondii\r\n11                                                                                                                                                                                                                                                                                                                                                                              Vibrio parahaemolyticus\r\n12                                                                                                                                                                                                                                                                                                                                                                                    Vibrio vulnificus\r\n13                                                                                                                                                                                                                                                                                                                          Vibrio non-cholera species other than V. parahaemolyticus and V. vulnificus\r\n14                                                                                                                                                                                                                                                                                                                                                                              Yersinia enterocolitica\r\n15                                                                                                                                                                                                                                                                                                                                                                                                 <NA>\r\n16                                                                                                                                                                                                                                                                                                                                                                           Total for all 15 pathogens\r\n17                                                                                                                                                                                                                                                                                                                                                                                                 <NA>\r\n18                                                                                                                                                                                                                                                                                                                                                                                                 <NA>\r\n19 Note that this set of estimates updates USDA, Economic Research Service (ERS) 2013 estimates to 2018 by adjusting for inflation and income growth as described in the Documentation page of this website. It does not update incidence number or the number of illness outcomes. Estimates in 2013 dollars can be found in the archive on the ERS, Cost of Foodborne Illnesses Data Product website.\r\n20                                                                                                                                                                                                                                                                                                                                                                                                 <NA>\r\n21                                                                                                                                                                                                                                                                                                                                                                                                 <NA>\r\n22                                                                                                                                             Source: This spreadsheet is based on: Hoffmann, Sandra, Michael Batz, J. Glenn Morris Jr.  2012.  “Annual Cost of Illness and Quality-Adjusted Life Year Losses in the United States Due to 14 Foodborne Pathogens.” J. Food Protection 75(7):1291-1302.\r\n    845024 2181485783.4322653\r\n1   965958          384277856\r\n2    57616           58394152\r\n3    11407            2571518\r\n4     1591         3189686110\r\n5  5461731         2566984191\r\n6  1027561         4142179161\r\n7   131254          159202402\r\n8    63153          311036907\r\n9   112752           31701852\r\n10   86686         3744008907\r\n11   34664           45735332\r\n12      96          359481557\r\n13   17564           81749064\r\n14   97656          313297920\r\n15      NA                 NA\r\n16 8914713        17571792712\r\n17      NA                 NA\r\n18      NA                 NA\r\n19      NA                 NA\r\n20      NA                 NA\r\n21      NA                 NA\r\n22      NA                 NA\r\n\r\nThere a couple things wrong here. First, the column names are wrong.\r\nSince we skipped the column names, R tried naming the\r\ncolumns based on the first row of data (which is wrong!). We can specify\r\nthe column names ourselves, using the col_names argument.\r\nWe can give col_names a character vector\r\nthat contains the names we want to give our columns. Specifically, we\r\ncan specify c(\"pathogen\",\"cases\",\"cost\") as the names of\r\nour columns. Note that pathogen wasn’t specified in the\r\noriginal data file, but we’re specifying it here.\r\nNext, you’ll notice that the data go on longer than we need. There’s\r\nsome white space in the data file, as well as a row containing the total\r\ncost for all pathogens (which we can eliminate). There’s also a couple\r\nof notes that we can eliminate. Rather than specify skip,\r\nwe can instead use the range argument to specify the\r\nrange of cells we want to read in. Looking back at our\r\ndata file, it looks like we only need cells A6:C20.\r\n\r\nLet’s try this again! As a reminder, we will be using the\r\ncol_names argument to name the columns of our data and the\r\nrange argument to specify the cells we want R\r\nto read in. Also note that we specify the path argument\r\nexplicitly now. read_excel() by default assumes the first\r\nthing you give it is the file path, but it doesn’t hurt to be\r\nexplicit.\r\n\r\n\r\nShow code\r\n\r\ndataset <- rio::import(\"http://raw.githubusercontent.com/abhinavkr26/DACSS-601-SUMMER-2022-BLOGS/main/datasets/basic%20datasets/Total_cost_for_top_15_pathogens_2018.xlsx\", range=\"A6:C20\", col_names=c(\"pathogen\",\"cases\",\"cost\"))\r\n\r\ndataset\r\n\r\n\r\n                                                                      pathogen\r\n1                                             Campylobacter spp. (all species)\r\n2                                                      Clostridium perfringens\r\n3                                           Cryptosporidium spp. (all species)\r\n4                                                      Cyclospora cayetanensis\r\n5                                                       Listeria monocytogenes\r\n6                                                                    Norovirus\r\n7                                           Salmonella (non-typhoidal species)\r\n8                                                       Shigella (all species)\r\n9                      Shiga toxin-producing Escherichia coli O157 (STEC O157)\r\n10             non-O157 Shiga toxin-producing Escherichia coli (STEC non-O157)\r\n11                                                           Toxoplasma gondii\r\n12                                                     Vibrio parahaemolyticus\r\n13                                                           Vibrio vulnificus\r\n14 Vibrio non-cholera species other than V. parahaemolyticus and V. vulnificus\r\n15                                                     Yersinia enterocolitica\r\n     cases       cost\r\n1   845024 2181485783\r\n2   965958  384277856\r\n3    57616   58394152\r\n4    11407    2571518\r\n5     1591 3189686110\r\n6  5461731 2566984191\r\n7  1027561 4142179161\r\n8   131254  159202402\r\n9    63153  311036907\r\n10  112752   31701852\r\n11   86686 3744008907\r\n12   34664   45735332\r\n13      96  359481557\r\n14   17564   81749064\r\n15   97656  313297920\r\n\r\nVoila! The dataset looks great.\r\nA little bit about dplyr\r\ndplyr is an R package for manipulating,\r\nwrangling, and transforming data. We will touch on it more next week,\r\nbut this is a brief introduction to a few useful dplyr\r\nfunctions.\r\n\r\n\r\nShow code\r\n\r\nlibrary(dplyr)\r\n\r\n\r\n\r\nselect()\r\nselect() allows us to only pick out\r\ncertain columns from a dataframe.\r\nBelow, we extract the cases column from our\r\ndataset object (see above). We don’t have to specify it in\r\nquotes (the reasons for this are beyond the scope of this lesson).\r\n\r\n\r\nShow code\r\n\r\nselect(dataset, cases)\r\n\r\n\r\n     cases\r\n1   845024\r\n2   965958\r\n3    57616\r\n4    11407\r\n5     1591\r\n6  5461731\r\n7  1027561\r\n8   131254\r\n9    63153\r\n10  112752\r\n11   86686\r\n12   34664\r\n13      96\r\n14   17564\r\n15   97656\r\n\r\nThe first argument tells R the dataframe we are looking\r\nin (dataset), and the second argument tells R\r\nthe columns we want to pick out.\r\nWe can also select multiple columns.\r\n\r\n\r\nShow code\r\n\r\nselect(dataset, cases, cost)\r\n\r\n\r\n     cases       cost\r\n1   845024 2181485783\r\n2   965958  384277856\r\n3    57616   58394152\r\n4    11407    2571518\r\n5     1591 3189686110\r\n6  5461731 2566984191\r\n7  1027561 4142179161\r\n8   131254  159202402\r\n9    63153  311036907\r\n10  112752   31701852\r\n11   86686 3744008907\r\n12   34664   45735332\r\n13      96  359481557\r\n14   17564   81749064\r\n15   97656  313297920\r\n\r\nYou can even use the - operator to tell R\r\nto not select certain columns. This is particularly\r\nhelpful when you have a dataset with many columns, but you want to\r\nremove a couple of them. Rather than say, write out the names of 28\r\ncolumns you want to include, you can simply write the\r\nnames of the 2 columns you don’t want to include.\r\n\r\n\r\nShow code\r\n\r\nselect(dataset, -pathogen)\r\n\r\n\r\n     cases       cost\r\n1   845024 2181485783\r\n2   965958  384277856\r\n3    57616   58394152\r\n4    11407    2571518\r\n5     1591 3189686110\r\n6  5461731 2566984191\r\n7  1027561 4142179161\r\n8   131254  159202402\r\n9    63153  311036907\r\n10  112752   31701852\r\n11   86686 3744008907\r\n12   34664   45735332\r\n13      96  359481557\r\n14   17564   81749064\r\n15   97656  313297920\r\n\r\nfilter()\r\nThe filter() function allows us to only include rows of\r\nthe data that meet certain criteria. For example, imagine that we only\r\nwant to analyze pathogens that infected at least 10,000 people. We can\r\nuse filter() to tell R to only include rows of\r\nthe data where cases is greater than or equal to\r\n10,000.\r\n\r\n\r\nShow code\r\n\r\nfilter(dataset, cases>=10000)\r\n\r\n\r\n                                                                      pathogen\r\n1                                             Campylobacter spp. (all species)\r\n2                                                      Clostridium perfringens\r\n3                                           Cryptosporidium spp. (all species)\r\n4                                                      Cyclospora cayetanensis\r\n5                                                                    Norovirus\r\n6                                           Salmonella (non-typhoidal species)\r\n7                                                       Shigella (all species)\r\n8                      Shiga toxin-producing Escherichia coli O157 (STEC O157)\r\n9              non-O157 Shiga toxin-producing Escherichia coli (STEC non-O157)\r\n10                                                           Toxoplasma gondii\r\n11                                                     Vibrio parahaemolyticus\r\n12 Vibrio non-cholera species other than V. parahaemolyticus and V. vulnificus\r\n13                                                     Yersinia enterocolitica\r\n     cases       cost\r\n1   845024 2181485783\r\n2   965958  384277856\r\n3    57616   58394152\r\n4    11407    2571518\r\n5  5461731 2566984191\r\n6  1027561 4142179161\r\n7   131254  159202402\r\n8    63153  311036907\r\n9   112752   31701852\r\n10   86686 3744008907\r\n11   34664   45735332\r\n12   17564   81749064\r\n13   97656  313297920\r\n\r\nThe first argument tells R the dataframe we want to look\r\nin, while the second argument tells R the criteria for\r\nincluding a row. Specifically, a row in dataset should\r\nonly be included if its value on the variable\r\ncases is greater than or equal to 10000.\r\nWe can also use the & (and) operator to include\r\nmultiple criteria. For example, say we want to filter\r\nout the rows of data for pathogens that don’t have at least 10,000 cases\r\nand costed less than $10,000,000 to the US in 2018.\r\n\r\n\r\nShow code\r\n\r\ndataset_filtered <- filter(dataset, cases>=10000 & cost>=10000000)\r\n\r\n\r\n\r\nWe might also be interested in pathogens that had a high case count\r\nOR a high economic cost. For this, we can use the\r\nlogical or (|) operator to consider pathogens with at least\r\n10,000 cases OR at least $10,000,000 in cost to the\r\nUS.\r\n\r\n\r\nShow code\r\n\r\nfilter(dataset, cases>=10000 | cost>=10000000)\r\n\r\n\r\n                                                                      pathogen\r\n1                                             Campylobacter spp. (all species)\r\n2                                                      Clostridium perfringens\r\n3                                           Cryptosporidium spp. (all species)\r\n4                                                      Cyclospora cayetanensis\r\n5                                                       Listeria monocytogenes\r\n6                                                                    Norovirus\r\n7                                           Salmonella (non-typhoidal species)\r\n8                                                       Shigella (all species)\r\n9                      Shiga toxin-producing Escherichia coli O157 (STEC O157)\r\n10             non-O157 Shiga toxin-producing Escherichia coli (STEC non-O157)\r\n11                                                           Toxoplasma gondii\r\n12                                                     Vibrio parahaemolyticus\r\n13                                                           Vibrio vulnificus\r\n14 Vibrio non-cholera species other than V. parahaemolyticus and V. vulnificus\r\n15                                                     Yersinia enterocolitica\r\n     cases       cost\r\n1   845024 2181485783\r\n2   965958  384277856\r\n3    57616   58394152\r\n4    11407    2571518\r\n5     1591 3189686110\r\n6  5461731 2566984191\r\n7  1027561 4142179161\r\n8   131254  159202402\r\n9    63153  311036907\r\n10  112752   31701852\r\n11   86686 3744008907\r\n12   34664   45735332\r\n13      96  359481557\r\n14   17564   81749064\r\n15   97656  313297920\r\n\r\nWrapping up\r\nThere’s many types of complicated datasets that you’ll encounter in\r\nyour data analysis career. This has been a short introduction to these\r\ntypes of tricky datasets and some useful dplyr functions\r\nfor working with them.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-07-13T18:11:52-04:00",
    "input_file": "More-Data-Import-DPLYR.knit.md"
  },
  {
    "path": "posts/Importing Datasets from Local System/",
    "title": "Importing Datasets from Local System",
    "description": "How to import datasets from local repository or file..",
    "author": [
      {
        "name": "DACSS Tutor",
        "url": {}
      }
    ],
    "date": "2022-06-21",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nWhat\r\nis Local system?\r\nWhat is Local repository or\r\nfile?\r\n\r\nHow to import dataset\r\nfrom Local system?\r\n\r\nWhat is Local system?\r\nAny computing device with data storage ability is referred to as our\r\nLocal system. It could be our laptops, desktops, tablets, touch phones,\r\netc.\r\nWhat is Local repository or\r\nfile?\r\nAny file that we create in our local computing device to store\r\nobjects, documents, or datasets is referred to as local reposiorty or\r\nfile.\r\nHow to import dataset\r\nfrom Local system?\r\nIn the previous tutorial, we discussed importing datasets from\r\nGithub. Now, we will discuss how easily we can import datasets from any\r\nfile from our system without giving the complete url path\r\nin the function argument.\r\nThe first thing that we need to do is to find out where our working\r\ndirectory rests. We can easily do so by using getwd()\r\nfunction. In the below code chunk, we will use the function to see where\r\nis the DACSS Tutor working directory currently.\r\n\r\n\r\nShow code\r\n\r\ngetwd()\r\n\r\n\r\n[1] \"F:/DACSS-601-SUMMER-2022-BLOGS/_posts/Importing Datasets from Local System\"\r\n\r\nFrom the output, we can observe that location of the working\r\ndirectory. Suppose, we need to set it elsewhere then we can do so by\r\nusing the function setwd() function. For the purpose of\r\nthis tutorial we will use the existing locating of the working\r\ndirectory.The below code chunk shows a hashed out function to set the\r\nworking directory by using the complete url path for location where you\r\nwant to set your working directory.\r\n\r\n\r\nShow code\r\n\r\n# setwd(\"F:/DACSS-601-SUMMER-2022-BLOGS\")\r\n\r\n\r\n\r\nLet us now import a dataset from the working directory. The existing\r\nworking directory is in F drive of the local system in the\r\nlocal file/repository DACSS-601-SUMMER-2022-BLOGS. Within\r\nthe local file is a sub file datasets from where we will\r\nimport organiceggpoultry dataset. It is in\r\nexcel file format.\r\n\r\n\r\nShow code\r\n\r\n# invoking \"readxl\" package to import csv file\r\nlibrary(readxl)\r\n\r\n# assigning data set to an object\r\negg <- read_excel(\"F:/DACSS-601-SUMMER-2022-BLOGS/datasets/Advanced_ Uncleaned datasets/organiceggpoultry.xlsx\")\r\n\r\nknitr::kable(head(egg))\r\n\r\n\r\n(Certified Organic denotes products grown\r\nand processed according to USDA’s national organic standards and\r\ncertified by USDA-accredited State and private certification\r\norganizations.)\r\n…2\r\n…3\r\n…4\r\n…5\r\n…6\r\n…7\r\n…8\r\n…9\r\n…10\r\n…11\r\nNA\r\nNA\r\nNA\r\nNA\r\nNA\r\nNA\r\nNA\r\nNA\r\nNA\r\nNA\r\nNA\r\nUSDA Certified Organic Eggs\r\nNA\r\nNA\r\nNA\r\nNA\r\nNA\r\nUSDA Certified Organic Young Chicken\r\nNA\r\nNA\r\nNA\r\nNA\r\nPrice per Carton Delivered to First\r\nReceivers\r\nNA\r\nNA\r\nNA\r\nNA\r\nNA\r\nPrice cents per pound Delivered to First\r\nReceivers\r\nNA\r\nNA\r\nNA\r\nNA\r\nNA\r\nExtra Large\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nDozen\r\nExtra Large 1/2 Doz.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n1/2 Dozen\r\nLarge\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nDozen\r\nLarge\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n1/2 Doz.\r\nNA\r\nWhole\r\nB/S Breast\r\nBone-in Breast\r\nWhole Legs\r\nThighs\r\n\r\n\r\n\r\n\r\nJan 2004\r\n230.0\r\n132.0\r\n230.0\r\n126.0\r\nNA\r\n197.5\r\n645.5\r\ntoo few\r\n193.5\r\ntoo few\r\nFebruary\r\n230.0\r\n134.5\r\n226.25\r\n128.5\r\nNA\r\n197.5\r\n642.5\r\ntoo few\r\n193.5\r\n203.0\r\n\r\nWe can observe here that the dataset has been imported from the local\r\nsystem to R Studio. Using the head() function we are able\r\nto observe the first few records of the dataset. Ofcourse this dataset\r\nis unclean and messy hence, we are unable to get a clean view of the\r\ndata. We will tackle the challenge of cleaning messy data in future\r\ntutorials. In case you have any questions regarding this tutorial, then\r\nkindly address your questions to your teaching assistant or faculty.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-06-21T00:54:58-04:00",
    "input_file": "Importing-Datasets-from-Local-System.knit.md"
  },
  {
    "path": "posts/R Markdown Introduction/",
    "title": "R Markdown Introduction",
    "description": "Understanding Basics of R Markdown (RMD) Tutorial",
    "author": [
      {
        "name": "DACSS Tutor",
        "url": {}
      }
    ],
    "date": "2022-06-19",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nWhat is R\r\nMarkdown?\r\nR Markdown\r\nView\r\n\r\nWhat is R Markdown?\r\nIt is an authoring framework for data-based projects. R Markdown is\r\nalso referred to as “RMD”. It is used to connect the data and generate\r\nreports. RMD is a simple plain text file with three types of\r\ncontent:\r\nYAML metadata to guide the RMD process\r\nCode Chunks to run\r\nText to display\r\nR Markdown View\r\n\r\n\r\nShow code\r\n\r\nknitr::include_graphics(path = \"G:/TA/image/RMD.png\")\r\n\r\n\r\n\r\n\r\nRMD can be used in the R Interactive Development Environment (IDE)\r\nfor productive notebook interface. RMD files are stored as “.RMD” . To\r\nbuild a report from the RMD file, “knit” function can be used to render\r\na report. RMD renders the report in familiar formats running the code\r\nand embedding the results in the finished document. RMD builds many\r\nfamiliar formats, such as:\r\nHTML\r\nPDF\r\nWord Doc\r\nSlide Show\r\nDashboards & many more…\r\nIn every case RMD remains as a reproducible record of work easy to\r\ntrack in version control system like Git and easy to deploy in\r\nfuture.\r\n\r\n\r\n\r\n",
    "preview": "posts/R Markdown Introduction/distill-preview.png",
    "last_modified": "2022-06-19T21:37:42-04:00",
    "input_file": "R-Markdown-Introduction.knit.md"
  },
  {
    "path": "posts/Importing Datasets from Github/",
    "title": "Importing Datasets from Github",
    "description": "How to import datasets from web repository..",
    "author": [
      {
        "name": "DACSS Tutor",
        "url": {}
      }
    ],
    "date": "2022-06-19",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nWhat is\r\nGithub?\r\nHow to import datasets from\r\nGithub?\r\n\r\nWhat is Github?\r\nAt a high level, GitHub is a website and cloud-based service that\r\nhelps developers store and manage their code, as well as track and\r\ncontrol changes to their code. To understand exactly what GitHub is, you\r\nneed to know two connected principles: - Version control - Git\r\nWhat is Version Control?\r\nVersion control helps developers track and manage changes to a\r\nsoftware project’s code. As a software project grows, version control\r\nbecomes essential. Version control lets developers safely work through\r\nbranching and merging. With branching, you can duplicate part of the\r\nsource code (called the repository) and then safely\r\nmake changes to that part of the code without affecting the rest of the\r\nproject. Then, once you get your part of the code working properly, you\r\ncan merge that code back into the main source code to make it official.\r\nAll of these changes are then tracked and can be reverted if need\r\nbe.\r\nWhat is Git?\r\nGit is a specific open-source version control system created by Linus\r\nTorvalds in 2005. Specifically, Git is a distributed version control\r\nsystem, which means that the entire codebase and history is available on\r\nyour computer, which allows for easy branching and merging. Essentially,\r\nit makes it a lot easier for individuals and teams to use Git for\r\nversion control and collaboration.\r\nNow that we understand what is Git and Github, we can use it as a\r\nrepository to host data sets and directly import data sets from there to\r\nRStudio for executing the projects.\r\nHow to import datasets from\r\nGithub?\r\nFor the purpose of the DACSS 601 course work, all the relevant\r\ndatasets for classwork have been hosted in Github in the repo\r\nDACSS-601-SUMMER-2022-BLOGS. This repo has a file\r\ndatasets with two sub files:\r\n\r\n\r\nShow code\r\n\r\nknitr::include_graphics(path = \"F:/DACSS-601-SUMMER-2022-BLOGS/image/gitrepoaddress.png\")\r\n\r\n\r\n\r\n\r\nThis repo has a file datasets with two sub-files: -\r\nAdvanced_Uncleaned Datasets -\r\nbasic Datasets\r\nYou can use any of the sub-files to access the data sets. There are\r\ndifferent types of data sets available with various difficulty levels.\r\nPlease chose a data set with your level of comfort and import the same\r\nto R Studio to Github.\r\n\r\n\r\nShow code\r\n\r\nknitr::include_graphics(path = \"F:/DACSS-601-SUMMER-2022-BLOGS/image/gitrepodatasetsubfile.png\")\r\n\r\n\r\n\r\n\r\nSo let us import a data set from basic datasets\r\nsub-file.\r\n\r\n\r\nShow code\r\n\r\nknitr::include_graphics(path = \"F:/DACSS-601-SUMMER-2022-BLOGS/image/gitreposubfilebasicdatasets.png\")\r\n\r\n\r\n\r\n\r\nLet us now import poultry_tidy.csv to RStudio. In order\r\nto import the data set from Github repo, we should be careful of\r\nimporting it from RAWcontent only. To access the\r\nRAW content data, you need to select the concerned data set\r\nby clicking on it first. That will take you to the data set\r\npage in Github.\r\n\r\n\r\nShow code\r\n\r\nknitr::include_graphics(path = \"F:/DACSS-601-SUMMER-2022-BLOGS/image/gitreposubfilebasicdatasetsrawcontentlink.png\")\r\n\r\n\r\n\r\n\r\nNow, select the RAW tab highlighted in the above image\r\nto access the raw content data else the data will always default to\r\nhtml type and will not get imported properly in\r\nRStudio.\r\n\r\n\r\nShow code\r\n\r\nknitr::include_graphics(path = \"F:/DACSS-601-SUMMER-2022-BLOGS/image/gitreposubfilebasicdatasetsrawcontentdata.png\")\r\n\r\n\r\n\r\n\r\nYou can now copy the url and use it to import the data\r\nset as shown in the code chunk below:\r\n\r\n\r\nShow code\r\n\r\n# invoke package readr\r\nlibrary(readr)\r\n\r\n#import poultry dataset\r\npoultry <- read_csv(\"https://raw.githubusercontent.com/abhinavkr26/DACSS-601-SUMMER-2022-BLOGS/main/datasets/basic%20datasets/poultry_tidy.csv\")\r\n\r\nhead(poultry)\r\n\r\n\r\n# A tibble: 6 × 4\r\n  Product  Year Month    Price_Dollar\r\n  <chr>   <dbl> <chr>           <dbl>\r\n1 Whole    2013 January          2.38\r\n2 Whole    2013 February         2.38\r\n3 Whole    2013 March            2.38\r\n4 Whole    2013 April            2.38\r\n5 Whole    2013 May              2.38\r\n6 Whole    2013 June             2.38\r\n\r\nNow, here we can observe that we have directly imported the dataset\r\nfrom Github without downloading or cloning the repository locally in our\r\nsystem. This is critical skill in our toolset as we may not always be\r\nable to download or clone repositiores in our local system. Also, it\r\ntakes substantial space in our local system. However, if there is a need\r\nto download or clone the datasets then it can be done easily and then\r\nthe datasets can easily be imported to R Studio from the local system\r\nitself. We will cover that in the next blog.\r\nNow, please do try to import the other datasets from the datasets\r\nrepository on your own to practice. For any errors that you are unable\r\nto resolve, please reach out to the course teaching assistanct or the\r\nfaculty. Although, it is highly recomended that you look for the\r\nsolution to the error online on platforms such as\r\nStack Overflow for a better understanding and mitigate such\r\nissues in future on your own.\r\n\r\n\r\n\r\n",
    "preview": "posts/Importing Datasets from Github/distill-preview.png",
    "last_modified": "2022-06-19T21:57:54-04:00",
    "input_file": "Importing-Datasets-from-Github.knit.md"
  },
  {
    "path": "posts/Video Blog of R Markdown Introduction/",
    "title": "R Markdown Introduction Video Lecture",
    "description": "Understanding Basics of R Markdown (RMD) Tutorial",
    "author": [
      {
        "name": "DACSS Tutor",
        "url": {}
      }
    ],
    "date": "2022-06-19",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-06-19T22:33:03-04:00",
    "input_file": "Vlog-of-R-Markdown-Introduction.knit.md"
  }
]
